# Stage 1: Build
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Install dependencies for build
RUN apk add --no-cache python3 make g++ git

# Install dependencies first (caching layer)
COPY package*.json ./
COPY yarn.lock ./

# Install dependencies
RUN yarn install --frozen-lockfile

# Copy source
COPY . .

# Build application
RUN yarn build

# Stage 2: Nginx
FROM nginx:alpine AS runner

# Install additional tools
RUN apk add --no-cache curl bash

# Create nginx user if it doesn't exist
RUN adduser -D -H -u 101 -s /sbin/nologin nginx || true

# Copy nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf
COPY nginx.default.conf /etc/nginx/conf.d/default.conf

# Copy built assets from builder
COPY --from=builder --chown=nginx:nginx /app/dist /usr/share/nginx/html

# Create cache directories and set permissions
RUN mkdir -p /var/cache/nginx && \
    mkdir -p /var/log/nginx && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html && \
    chown -R nginx:nginx /etc/nginx/conf.d

# Security headers
RUN echo "add_header X-Frame-Options 'SAMEORIGIN' always;" >> /etc/nginx/conf.d/security-headers.conf && \
    echo "add_header X-XSS-Protection '1; mode=block' always;" >> /etc/nginx/conf.d/security-headers.conf && \
    echo "add_header X-Content-Type-Options 'nosniff' always;" >> /etc/nginx/conf.d/security-headers.conf && \
    echo "add_header Referrer-Policy 'no-referrer-when-downgrade' always;" >> /etc/nginx/conf.d/security-headers.conf && \
    echo "add_header Content-Security-Policy \"default-src 'self' https: data: 'unsafe-inline' 'unsafe-eval';\" always;" >> /etc/nginx/conf.d/security-headers.conf

# Copy health check script
COPY docker-healthcheck.sh /usr/local/bin/docker-healthcheck
RUN chmod +x /usr/local/bin/docker-healthcheck

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
    CMD ["docker-healthcheck"]

# Switch to non-root user
USER nginx

# Document that the container listens on port 80
EXPOSE 80

# Start Nginx
CMD ["nginx", "-g", "daemon off;"]

# Labels
LABEL maintainer="Algo360FX Team <team@algo360fx.com>" \
      version="1.0.0" \
      description="Algo360FX Frontend Service" \
      org.opencontainers.image.source="https://github.com/algo360fx/algo360fx-frontend" \
      org.opencontainers.image.vendor="Algo360FX" \
      org.opencontainers.image.title="Algo360FX Frontend" \
      org.opencontainers.image.description="Frontend service for Algo360FX trading platform" \
      org.opencontainers.image.version="1.0.0" \
      org.opencontainers.image.created=${BUILD_DATE} \
      org.opencontainers.image.revision=${BUILD_REVISION} \
      org.opencontainers.image.licenses="MIT"
